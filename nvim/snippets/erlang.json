{
    "statem": {
        "prefix": "statem",
        "description": "gen_statem building block",
        "isFileTemplate": true,
        "body": [
            "-module($TM_FILENAME_BASE).",
            "",
            "-behaviour(gen_statem).",
            "",
            "-include_lib(\"kernel/include/logger.hrl\").",
            "",
            "-type state() :: term().",
            "-type data() :: term().",
            "-type fsm_init() :: gen_statem:init_result(state(), data()).",
            "-type fsm_res() :: gen_statem:event_handler_result(state(), data()).",
            "",
            "%% gen_statem callbacks",
            "-export([start/2, start_link/2, start_monitor/2]).",
            "-export([callback_mode/0, handle_event/4, init/1, terminate/3]).",
            "",
            "%% gen_statem",
            "-spec start(term(), [gen_statem:start_opt()]) -> gen_statem:start_ret().",
            "start(Args, ProcOpts) ->",
            "    gen_statem:start(?MODULE, Args, ProcOpts).",
            "",
            "-spec start_link(term(), [gen_statem:start_opt()]) -> gen_statem:start_ret().",
            "start_link(Args, ProcOpts) ->",
            "    gen_statem:start_link(?MODULE, Args, ProcOpts).",
            "",
            "-spec start_monitor(term(), [gen_statem:start_opt()]) -> gen_statem:start_ret().",
            "start_monitor(Args, ProcOpts) ->",
            "    gen_statem:start_monitor(?MODULE, Args, ProcOpts).",
            "",
            "-spec callback_mode() -> gen_statem:callback_mode_result().",
            "callback_mode() ->",
            "    handle_event_function.",
            "",
            "-spec init(_) -> fsm_init().",
            "init(_) ->",
            "    {ok, state, data, [{next_event, internal, init}]}.",
            "",
            "-spec terminate(term(), state(), data()) -> term().",
            "terminate(_, _, _) ->",
            "    ok.",
            "",
            "-spec handle_event(gen_statem:event_type(), term(), state(), data()) -> fsm_res().",
            "handle_event(EventType, EventContent, State, Data) ->",
            "    ?LOG_WARNING(#{what => unhandled_event, state => State, data => Data,",
            "                   type => EventType, content => EventContent}),",
            "    keep_state_and_data."
        ]
    },
    "ct_SUITE": {
        "prefix": "ct_SUITE",
        "description": "ct_SUITE building block",
        "isFileTemplate": true,
        "body": [
            "-module($TM_FILENAME_BASE).",
            "-compile([export_all, nowarn_export_all]).",
            "",
            "-behaviour(ct_suite).",
            "",
            "-include_lib(\"stdlib/include/assert.hrl\").",
            "",
            "all() ->",
            "    [",
            "    ].",
            "",
            "groups() ->",
            "    [",
            "    ].",
            "",
            "init_per_suite(Config) ->",
            "    Config.",
            "",
            "end_per_suite(Config) ->",
            "    Config.",
            "",
            "init_per_group(_, Config) ->",
            "    Config.",
            "",
            "end_per_group(_, _Config) ->",
            "    ok.",
            "",
            "init_per_testcase(_, Config) ->",
            "    Config.",
            "",
            "end_per_testcase(_, Config) ->",
            "    Config.",
            "",
            "%% Tests"
        ]
    }
}
